<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	elementFormDefault="qualified" attributeFormDefault="unqualified">

	<xs:element name="user" type="user" />
	<xs:complexType name="user">
		<xs:annotation>
			<xs:documentation>User Object.</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element name="record_type" minOccurs="0">
				<xs:annotation>
					<xs:appinfo>
						<xs:codeTable>AddNewUserOptions</xs:codeTable>
						<xs:tags>api get post put</xs:tags>
					</xs:appinfo>
					<xs:documentation>The type of user record.
					Possible codes are listed in 'AddNewUserOptions' [code table|https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API]: Contact, Staff, Public.
						Mandatory In User API. On SIS load, this field is determined according to the SIS profile.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base="xs:string">
							<xs:attribute name="desc" type="xs:string" use="optional" />
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="primary_id" type="xs:string" minOccurs="0"
				maxOccurs="1">
				<xs:annotation>
					<xs:appinfo>
						<xs:tags>api sis get post put</xs:tags>
					</xs:appinfo>
					<xs:documentation>The primary identifier of the user.
                                Mandatory for Update-User API.
								In the Create-User API, it can be generated by not supplying it in the input according to same rules as applied in the UI.
                                For new users in SIS load, if not supplied, the system will generate a default based on the first and the last name.
                                Note that the primary_id is case insensitive.
                                	</xs:documentation>

				</xs:annotation>
			</xs:element>
			<xs:element name="full_name" minOccurs="0" maxOccurs="1" type="xs:string">
				<xs:annotation>
					<xs:appinfo>
						<xs:tags>api get</xs:tags>
					</xs:appinfo>
					<xs:documentation>The user's full name. Output parameter.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="pin_number" type="xs:string" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:appinfo>
						<xs:tags>api sis post put</xs:tags>
					</xs:appinfo>
					<xs:documentation>A four-digit number which serves as a password for the user to log on to the selfcheck machine (SIP2).
					On SIS synch this field will not be replaced if it was updated manually (or if empty in the incoming user record).
					For external users in PUT action: this field will not be replaced if it was updated manually (or if empty in the incoming user record), unless 'override' parameter is sent with the field's name.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="user_group" minOccurs="0">
				<xs:annotation>
					<xs:appinfo>
						<xs:codeTable>UserGroups</xs:codeTable>
						<xs:tags>api sis get post put</xs:tags>
					</xs:appinfo>
					<xs:documentation>The group within the institution to which the user belongs.
					Possible codes are listed in 'User Groups' [code table|https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API].
					Rules for user group usage are define in 'UserRecordTypeUserGroup' mapping table.
					On SIS synch this field will not be replaced if it was updated manually (or if empty in the incoming user record).
					For external users in PUT action: this field will not be replaced if it was updated manually (or if empty in the incoming user record), unless 'override' parameter is sent with the field's name.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base="xs:string">
							<xs:attribute name="desc" type="xs:string" use="optional" />
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="preferred_language" minOccurs="0">
				<xs:annotation>
					<xs:appinfo>
						<xs:codeTable>UserPreferredLanguage</xs:codeTable>
						<xs:tags>api sis get post put</xs:tags>
					</xs:appinfo>
					<xs:documentation>The user's preferred language.
					Possible codes are listed in 'User Preferred Language' [code table|https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API].
					Default is the institution language.
					On SIS synch this field will not be replaced if it was updated manually (or if empty in the incoming user record).
					For external users in PUT action: this field will not be replaced if it was updated manually (or if empty in the incoming user record), unless 'override' parameter is sent with the field's name.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base="xs:string">
							<xs:attribute name="desc" type="xs:string" use="optional" />
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="birth_date" type="xs:date" minOccurs="0">
				<xs:annotation>
					<xs:appinfo>
						<xs:tags>api sis get post put</xs:tags>
					</xs:appinfo>
					<xs:documentation>The user's birth date.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="expiry_date" type="xs:date" minOccurs="0"
				maxOccurs="1">
				<xs:annotation>
					<xs:appinfo>
						<xs:tags>api sis get post put</xs:tags>
					</xs:appinfo>
					<xs:documentation>The estimated date when the user is expected to leave the institution.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="purge_date" type="xs:date" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The date on which the user is purged from the system.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="account_type" minOccurs="0">
				<xs:annotation>
					<xs:appinfo>
						<xs:tags>api get post put</xs:tags>
						<xs:codeTable>UserUserType</xs:codeTable>
					</xs:appinfo>
					<xs:documentation>The user's [account type|https://developers.exlibrisgroup.com/blog/Users-API-working-with-external-internal-users].
					Possible code are listed in 'User Types - User' [code table|https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API].
					This field is mandatory in the User API.
					In the PUT action, it is possible to update Internal user to be External. It is NOT possible to update External user to be Internal.
					On SIS load, users are always created as "External".
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base="xs:string">
							<xs:attribute name="desc" type="xs:string" use="optional" />
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="external_id" type="xs:string" minOccurs="0"
				maxOccurs="1">
				<xs:annotation>
					<xs:appinfo>
						<xs:tags>api post put get</xs:tags>
					</xs:appinfo>
					<xs:documentation>The external system from which the user was loaded into Alma. Relevant only for External users.
						This field is mandatory during the POST and PUT actions for external users, and must match a valid SIS external system profile.
						On SIS load, it is filled with the SIS profile code.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="status" minOccurs="0">
				<xs:annotation>
					<xs:appinfo>
						<xs:tags>api sis get post put</xs:tags>
						<xs:codeTable>ContentStructureStatus</xs:codeTable>
					</xs:appinfo>
					<xs:documentation>Status of user account.
					Possible codes are listed in 'Content Structure Status' [code table|https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API].
					Default is Active.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base="xs:string">
							<xs:attribute name="desc" type="xs:string" use="optional" />
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="contact_info" type="contact_info"
				minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:appinfo>
						<xs:tags>api sis get post put</xs:tags>
					</xs:appinfo>
					<xs:documentation>List of the user's contacts information.
					</xs:documentation>
				</xs:annotation>
			</xs:element>

			<xs:element name="user_identifiers" type="user_identifiers"
				minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:appinfo>
						<xs:tags>api sis get post put</xs:tags>
					</xs:appinfo>
					<xs:documentation>List of the user's additional identifiers.
					</xs:documentation>
				</xs:annotation>
			</xs:element>

		</xs:all>
		<xs:attribute name="link" type="xs:string" use="optional" />
	</xs:complexType>

	<xs:complexType name="contact_info">
		<xs:annotation>
			<xs:appinfo>
				<xs:tags>api sis get post put</xs:tags>
			</xs:appinfo>
			<xs:documentation>List of the user's contacts information.
				SIS: In case of new user, these segments will be marked as "external".
				In case of synchronization, this list will replace the existing external contacts. Internal contacts will be kept.
				POST action: The segments will be created as external or as internal according to the "segment_type" attribute.
				PUT action: Incoming internal segments (based on the "segment_type" attribute) will replace the existing internal segments.
				Incoming external segments (based on the "segment_type" attribute) will replace the existing external segments.
				If the incoming list is empty, existing segments will be deleted.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="emails" type="emails" minOccurs="0">
				<xs:annotation>
					<xs:appinfo>
						<xs:tags>api sis get post put</xs:tags>
					</xs:appinfo>
					<xs:documentation>List of user's email addresses.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="phones" type="phones" minOccurs="0">
				<xs:annotation>
					<xs:appinfo>
						<xs:tags>api sis get post put</xs:tags>
					</xs:appinfo>
					<xs:documentation>List of user's phone numbers.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="emails">
		<xs:annotation>
			<xs:appinfo>
				<xs:tags>api sis get post put</xs:tags>
			</xs:appinfo>
			<xs:documentation>List of user's email addresses.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="email" type="email" minOccurs="1"
					maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Specific user's email address.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="email">
		<xs:annotation>
			<xs:appinfo>
				<xs:tags>api sis get post put</xs:tags>
			</xs:appinfo>
			<xs:documentation>Specific user's email address.</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element name="email_address" type="xs:string">
				<xs:annotation>
					<xs:appinfo>
						<xs:tags>api sis get post put</xs:tags>
					</xs:appinfo>
					<xs:documentation>The email address. Mandatory.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="description" type="xs:string" minOccurs="0"
					maxOccurs="1">
				<xs:annotation>
					<xs:appinfo>
						<xs:tags>api sis get post put</xs:tags>
					</xs:appinfo>
					<xs:documentation>The email address' related description.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="email_types">
				<xs:complexType>
					<xs:annotation>
						<xs:appinfo>
							<xs:tags>api sis get post put</xs:tags>
						</xs:appinfo>
						<xs:documentation>The different email types.
							Mandatory.</xs:documentation>
					</xs:annotation>
					<xs:sequence>

						<xs:element name="email_type" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:appinfo>
									<xs:codeTable>MT_UserRecordType2EmailType_by_CT_UserEmailTypes_source1:staff,public,contact_source2:anything</xs:codeTable>
								</xs:appinfo>
								<xs:documentation>Possible codes are listed in the 'UserEmailTypes' [code table|https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API].
								</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:simpleContent>
									<xs:extension base="xs:string">
										<xs:attribute name="desc" type="xs:string" use="optional" />
									</xs:extension>
								</xs:simpleContent>
							</xs:complexType>
						</xs:element>

					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:all>
		<xs:attribute name="preferred" type="xs:boolean" default="false">
			<xs:annotation>
				<xs:appinfo>
					<xs:tags>api sis get post put</xs:tags>
				</xs:appinfo>
				<xs:documentation>Indication whether the email address is the preferred one.
					Only one address can be defined as preferred.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="segment_type" type="xs:string" >
			<xs:annotation>
				<xs:appinfo>
					<xs:tags>api get post put</xs:tags>
				</xs:appinfo>
				<xs:documentation>The type of the segment ("Internal" or "External").
				Relevant only for User API (and not for SIS).
				For internal users, all the segments are considered internal.
				External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="phones">
		<xs:annotation>
			<xs:documentation>List of user's phone numbers.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="phone" type="phone" minOccurs="0"
					maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Specific user's phone number.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="phone">
		<xs:annotation>
			<xs:documentation>Specific user's phone number.</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element name="phone_number" type="xs:string">
				<xs:annotation>
					<xs:documentation>The phone number.
						Mandatory.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="phone_types">
				<xs:annotation>
					<xs:documentation>The different Phone types.
						Mandatory.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:annotation>
						<xs:documentation>Phone types.</xs:documentation>
					</xs:annotation>
					<xs:sequence>

						<xs:element name="phone_type" minOccurs="0" maxOccurs="unbounded">
							<xs:annotation>
								<xs:appinfo>
									<xs:codeTable>MT_UserRecordType2PhoneType_by_CT_UserPhoneTypes_source1:staff,public,contact_source2:anything</xs:codeTable>
								</xs:appinfo>
								<xs:documentation>Possible values are listed in the 'UserPhoneTypes' [code table|https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API].
								</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:simpleContent>
									<xs:extension base="xs:string">
										<xs:attribute name="desc" type="xs:string" use="optional" />
									</xs:extension>
								</xs:simpleContent>
							</xs:complexType>
						</xs:element>

					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:all>

		<xs:attribute name="preferred" type="xs:boolean" default="false">
			<xs:annotation>
				<xs:documentation>Indication whether the phone number is the preferred one.
					Only one address can be defined as preferred.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="preferred_sms" type="xs:boolean"
				default="false">
			<xs:annotation>
				<xs:documentation>Indication whether the phone number is the preferred one for SMS sending.
					Only one phone number can be defined as preferred.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="segment_type" type="xs:string" >
			<xs:annotation>
				<xs:appinfo>
					<xs:tags>api get post put</xs:tags>
				</xs:appinfo>
				<xs:documentation>The type of the segment ("Internal" or "External").
				Relevant only for User API (and not for SIS).
				For internal users, all the segments are considered internal.
				External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:complexType name="user_identifiers">
		<xs:annotation>
			<xs:documentation>List of the user's additional identifiers.
				Note that additional identifiers are case sensitive.
				SIS: In case of new user, these segments will be marked as "external".
				In case of synchronization, this list will replace the existing external identifiers. Internal identifiers will be kept.
				POST action: The segments will be created as external or as internal according to the "segment_type" attribute.
				PUT action: Incoming internal segments (based on the "segment_type" attribute) will replace the existing internal segments.
				Incoming external segments (based on the "segment_type" attribute) will replace the existing external segments.
				If the incoming list is empty, existing segments will be deleted.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="user_identifier" type="user_identifier"
					minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Specific user's identifier.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="user_identifier">
		<xs:annotation>
			<xs:documentation>Specific user's identifier.</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element name="id_type" minOccurs="1">
				<xs:annotation>
					<xs:appinfo>
						<xs:codeTable>UserIdentifierTypes</xs:codeTable>
					</xs:appinfo>
					<xs:documentation>The identifier type.
						Possible codes are listed in 'User Identifier Type' [code table|https://developers.exlibrisgroup.com/blog/Working-with-the-code-tables-API].
						Mandatory.
					</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base="xs:string">
							<xs:attribute name="desc" type="xs:string" use="optional" />
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="value" type="xs:string" minOccurs="1"
					maxOccurs="1">
				<xs:annotation>
					<xs:documentation>The identifier value.
						Mandatory.
						Note that additional identifiers are case sensitive.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="note" type="xs:string" minOccurs="0"
					maxOccurs="1">
				<xs:annotation>
					<xs:documentation>identifier's note.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="status" type="xs:string" minOccurs="0"
					maxOccurs="1">
				<xs:annotation>
					<xs:documentation>identifier's status.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:all>
		<xs:attribute name="segment_type" type="xs:string" >
			<xs:annotation>
				<xs:appinfo>
					<xs:tags>api get post put</xs:tags>
				</xs:appinfo>
				<xs:documentation>The type of the segment ("Internal" or "External").
				Relevant only for User API (and not for SIS).
				For internal users, all the segments are considered internal.
				External users might have internal or external segments. Empty or illegal segment_type for external user will be considered as external.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

</xs:schema>
